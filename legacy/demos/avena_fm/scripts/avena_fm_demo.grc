options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: avena_fm_demo
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: RTL-SDR FM Tuner
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 8.0]
    rotation: 0
    state: enabled

blocks:
- name: audio_rate
  id: variable
  parameters:
    comment: ''
    value: '44000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 80.0]
    rotation: 0
    state: true
- name: cutoff
  id: variable
  parameters:
    comment: ''
    value: '100000.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 8.0]
    rotation: 0
    state: true
- name: decimation
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 80.0]
    rotation: 0
    state: true
- name: fc
  id: variable
  parameters:
    comment: ''
    value: 98.7e06
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 8.0]
    rotation: 0
    state: true
- name: fft_size
  id: variable
  parameters:
    comment: ''
    value: '1024'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 80.0]
    rotation: 0
    state: true
- name: ft
  id: variable
  parameters:
    comment: ''
    value: 98.7e06
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 8.0]
    rotation: 0
    state: true
- name: max_buff
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 80.0]
    rotation: 0
    state: true
- name: min_buff
  id: variable
  parameters:
    comment: ''
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 80.0]
    rotation: 0
    state: true
- name: quadrature
  id: variable
  parameters:
    comment: ''
    value: samp_rate/4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 8.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1e06
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 8.0]
    rotation: 0
    state: enabled
- name: sdr_gain
  id: variable
  parameters:
    comment: ''
    value: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 80.0]
    rotation: 0
    state: true
- name: stream
  id: variable
  parameters:
    comment: ''
    value: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 80.0]
    rotation: 0
    state: true
- name: transition_bw
  id: variable
  parameters:
    comment: ''
    value: 10e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [456, 8.0]
    rotation: 0
    state: true
- name: volume
  id: variable
  parameters:
    comment: ''
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 8.0]
    rotation: 0
    state: true
- name: analog_wfm_rcv_0
  id: analog_wfm_rcv
  parameters:
    affinity: ''
    alias: ''
    audio_decimation: int(samp_rate/200000)
    comment: ''
    maxoutbuf: max_buff
    minoutbuf: min_buff
    quad_rate: quadrature
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 368.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_0
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 200.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: '256'
    type: complex
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [984, 192.0]
    rotation: 0
    state: true
- name: blocks_moving_average_xx_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: '256'
    max_iter: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 1.0/256.0
    type: complex
    vlen: fft_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 176.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: fc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 584.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_0_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: sdr_gain
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 528.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_0_1
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: ft
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 648.0]
    rotation: 0
    state: true
- name: blocks_msgpair_to_var_1
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: stream
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 464.0]
    rotation: 0
    state: true
- name: blocks_null_source_0
  id: blocks_null_source
  parameters:
    affinity: ''
    alias: ''
    bus_structure_source: '[[0,],]'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 536.0]
    rotation: 0
    state: true
- name: blocks_selector_0
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'False'
    input_index: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '1'
    num_outputs: '1'
    output_index: '0'
    showports: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 320.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: fft_size
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 208.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import os\nimport numpy as np\nfrom gnuradio import gr\nfrom pynats2\
      \ import NATSClient\nimport json\nfrom base64 import b64encode, b64decode\n\n\
      class NumpyEncoder(json.JSONEncoder):\n    def default(self, obj):\n       \
      \ if isinstance(obj, np.ndarray):\n            return obj.tolist()\n       \
      \ return json.JSONEncoder.default(self, obj)\n\nclass blk(gr.sync_block):  #\
      \ other base classes are basic_block, decim_block, interp_block\n\n\n    def\
      \ __init__(self, vector_size=1024, subject='fft', \n                 nats_server='nats://localhost:4222',\n\
      \                 freq=98700000, span=2000000, stream=False, gain=0):  # only\
      \ default arguments here\n\n        gr.sync_block.__init__(\n            self,\n\
      \            name='NATS Sink',   # will show up in GRC\n            in_sig=[(np.ushort,\
      \ vector_size)],\n            out_sig=None\n        )\n\n        avena_prefix\
      \ = os.getenv('AVENA_PREFIX')\n        self.vector_size = vector_size\n    \
      \    self.freq = freq\n        self.span = span\n        self.stream = stream\n\
      \        self.gain = gain\n        self.subject = subject\n        #self.subject\
      \ = avena_prefix + '.' + subject\n        self.nc = NATSClient(nats_server,\
      \ socket_timeout=2)\n        self.nc.connect()\n        \n    def work(self,\
      \ input_items, output_items):\n        \n        b64encpayload = str(b64encode(input_items[0][0]),\
      \ 'utf-8')\n        json_dump = json.dumps({'fft': b64encpayload,\n        \
      \                        'fc' : self.freq,\n                               \
      \ 'gain' : self.gain, \n                                'span' : self.span,\
      \ \n                                'fft_size' : self.vector_size,\n       \
      \                         'stream' : self.stream}, \n                      \
      \          cls=NumpyEncoder)\n        self.nc.publish(subject=self.subject ,payload=json_dump)\n\
      \        \n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    freq: fc
    gain: sdr_gain
    maxoutbuf: max_buff
    minoutbuf: min_buff
    nats_server: '''nats://localhost:4222'''
    span: samp_rate
    stream: stream
    subject: '''sdr.fft'''
    vector_size: fft_size
  states:
    _io_cache: ('NATS Sink', 'blk', [('vector_size', '1024'), ('subject', "'fft'"),
      ('nats_server', "'nats://localhost:4222'"), ('freq', '98700000'), ('span', '2000000'),
      ('stream', 'False'), ('gain', '0')], [('0', 'short', 1024)], [], '', ['freq',
      'gain', 'span', 'stream', 'subject', 'vector_size'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1568, 148.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\nimport os\nimport numpy as np\nfrom gnuradio import gr\nimport\
      \ pmt\nfrom pynats2 import NATSClient\nimport json\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n\n    def\
      \ __init__(self, nats_server='nats://localhost:4222', \n                 subject='sdr.control'):\
      \  # only default arguments here\n        gr.sync_block.__init__(\n        \
      \    self,\n            name='NATS Subscription',   # will show up in GRC\n\
      \            in_sig=[np.complex64],\n            out_sig=None\n        )\n \
      \       # if an attribute with the same name as a parameter is found,\n    \
      \    # a callback is registered (properties work, too).\n        avena_prefix\
      \ = os.getenv('AVENA_PREFIX')\n        self.port_1 = 'Frequency'\n        self.port_2\
      \ = 'Center Frequency'\n        self.port_3 = 'Gain'\n        self.port_4 =\
      \ 'Stream Control'\n        self.port_5 = 'Stream Status' # THERE MIGHT BE BETTER\
      \ WAYS TO DO THIS!\n        #self.subject = avena_prefix + '.' + subject\n \
      \       self.subject = subject\n        self.message_port_register_out(pmt.intern(self.port_1))\n\
      \        self.message_port_register_out(pmt.intern(self.port_2))\n        self.message_port_register_out(pmt.intern(self.port_3))\
      \   \n        self.message_port_register_out(pmt.intern(self.port_4))\n    \
      \    self.message_port_register_out(pmt.intern(self.port_5))             \n\
      \        self.nc = NATSClient(nats_server, socket_timeout=2)\n        self.nc.connect()\n\
      \        self.nc.subscribe(subject=self.subject, callback=self.callback)\n \
      \       \n    \n    def callback(self, msg):\n\t\n        nats_msg = json.loads(msg.payload.decode())\
      \    \n        PMT_msg_1 = pmt.cons(pmt.string_to_symbol('ft'), \n         \
      \         pmt.from_long(nats_msg['ft']))\n        PMT_msg_2 = pmt.cons(pmt.string_to_symbol('fc'),\
      \ \n                  pmt.from_long(nats_msg['fc']))\n        PMT_msg_3 = pmt.cons(pmt.string_to_symbol('gain'),\
      \ \n                  pmt.from_long(nats_msg['gain']))\n        PMT_msg_4 =\
      \ pmt.to_pmt(nats_msg['stream'])\n        PMT_msg_5 = pmt.cons(pmt.string_to_symbol('stream'),\
      \ \n                  pmt.from_bool(nats_msg['stream']))\n        \n       \
      \ self.message_port_pub(pmt.intern(self.port_1), PMT_msg_1)\n        self.message_port_pub(pmt.intern(self.port_2),\
      \ PMT_msg_2)\n        self.message_port_pub(pmt.intern(self.port_3), PMT_msg_3)\n\
      \        self.message_port_pub(pmt.intern(self.port_4), PMT_msg_4)\n       \
      \ self.message_port_pub(pmt.intern(self.port_5), PMT_msg_5)\n        \n    \
      \    print(f\"Frequency set to {nats_msg['ft']} Hz\")\n        print(f\"Center\
      \ Frequency set to {nats_msg['fc']} Hz\")\n        print(f\"Gain set to {nats_msg['gain']}\
      \ dB\")\n        print(f\"Streaming: {nats_msg['stream']}\")   \n          \
      \   \n    def work(self, input_items, output_items):\n        \n        return\
      \ len(input_items[0])\n        \n        \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nats_server: '''nats://localhost:4222'''
    subject: '''sdr.control'''
  states:
    _io_cache: ('NATS Subscription', 'blk', [('nats_server', "'nats://localhost:4222'"),
      ('subject', "'sdr.control'")], [('0', 'complex', 1)], [('Stream Status', 'message',
      1), ('Stream Control', 'message', 1), ('Gain', 'message', 1), ('Center Frequency',
      'message', 1), ('Frequency', 'message', 1)], '', ['subject'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 472.0]
    rotation: 0
    state: true
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, scale=1,\
      \ vector_size=1024):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Float to UShort',   # will show up in\
      \ GRC\n            in_sig=[(np.single, vector_size)],\n            out_sig=[(np.ushort,\
      \ vector_size)]\n        )\n        # if an attribute with the same name as\
      \ a parameter is found,\n        # a callback is registered (properties work,\
      \ too).\n        self.scale = scale\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:]\
      \ = np.ushort(input_items[0] * self.scale)\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '10000'
    vector_size: fft_size
  states:
    _io_cache: ('Float to UShort', 'blk', [('scale', '1'), ('vector_size', '1024')],
      [('0', 'float', 1024)], [('0', 'short', 1024)], 'Embedded Python Block example
      - a simple multiply const', ['scale'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1384, 192.0]
    rotation: 0
    state: true
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: fft_size
    forward: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    shift: 'True'
    type: complex
    window: window.blackmanharris(fft_size)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 168.0]
    rotation: 0
    state: true
- name: freq_xlating_fir_filter_xxx_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: ft-fc
    comment: ''
    decim: decimation
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: ' firdes.complex_band_pass(1, samp_rate, -samp_rate/(2*decimation), samp_rate/(2*decimation),
      transition_bw)'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [816, 352.0]
    rotation: 0
    state: true
- name: network_udp_sink_0
  id: network_udp_sink
  parameters:
    addr: 127.0.0.1
    affinity: ''
    alias: ''
    comment: ''
    header: '0'
    payloadsize: '1472'
    port: '2000'
    send_eof: 'False'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1488, 344.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: int(samp_rate/40000)
    fbw: '0'
    interp: int(audio_rate/10000*samp_rate/200000)
    maxoutbuf: max_buff
    minoutbuf: min_buff
    taps: '[]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1304, 352.0]
    rotation: 0
    state: true
- name: rtlsdr_source_0
  id: rtlsdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: ''
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: ft
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: sdr_gain
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: max_buff
    minoutbuf: min_buff
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 228.0]
    rotation: 0
    state: true

connections:
- [analog_wfm_rcv_0, '0', rational_resampler_xxx_0, '0']
- [blocks_complex_to_mag_0, '0', epy_block_3, '0']
- [blocks_keep_one_in_n_0, '0', blocks_complex_to_mag_0, '0']
- [blocks_moving_average_xx_0, '0', blocks_keep_one_in_n_0, '0']
- [blocks_null_source_0, '0', epy_block_1, '0']
- [blocks_selector_0, '0', freq_xlating_fir_filter_xxx_0, '0']
- [blocks_stream_to_vector_0, '0', fft_vxx_0, '0']
- [epy_block_1, Center Frequency, blocks_msgpair_to_var_0, inpair]
- [epy_block_1, Frequency, blocks_msgpair_to_var_0_1, inpair]
- [epy_block_1, Gain, blocks_msgpair_to_var_0_0, inpair]
- [epy_block_1, Stream Control, blocks_selector_0, en]
- [epy_block_1, Stream Status, blocks_msgpair_to_var_1, inpair]
- [epy_block_3, '0', epy_block_0, '0']
- [fft_vxx_0, '0', blocks_moving_average_xx_0, '0']
- [freq_xlating_fir_filter_xxx_0, '0', analog_wfm_rcv_0, '0']
- [rational_resampler_xxx_0, '0', network_udp_sink_0, '0']
- [rtlsdr_source_0, '0', blocks_selector_0, '0']
- [rtlsdr_source_0, '0', blocks_stream_to_vector_0, '0']

metadata:
  file_format: 1
